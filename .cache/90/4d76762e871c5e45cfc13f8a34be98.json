{"id":"../node_modules/@react-spring/shared/esm/types.util.js","dependencies":[{"name":"/Users/danbi/eunchurn/shh_works/node_modules/@react-spring/shared/esm/types.util.js.map","includedInParent":true,"mtime":1591323023646},{"name":"/Users/danbi/eunchurn/shh_works/package.json","includedInParent":true,"mtime":1603034588439},{"name":"/Users/danbi/eunchurn/shh_works/node_modules/@react-spring/shared/package.json","includedInParent":true,"mtime":1591323023646},{"name":"@alloc/types","loc":{"line":1,"column":14},"parent":"/Users/danbi/eunchurn/shh_works/node_modules/@react-spring/shared/esm/types.util.js","resolved":"/Users/danbi/eunchurn/shh_works/node_modules/@alloc/types/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _types = require(\"@alloc/types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _types[key];\n    }\n  });\n});"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":13,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":15,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":17,"column":0}},{"source":"../../src/types.util.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":18,"column":0}}],"sources":{"../../src/types.util.ts":"import { Remap, Any } from '@alloc/types'\n\nexport * from '@alloc/types'\n\n/** Ensure each type of `T` is an array */\nexport type Arrify<T> = [T, T] extends [infer T, infer DT]\n  ? DT extends ReadonlyArray<any>\n    ? Array<DT[number]> extends DT\n      ? ReadonlyArray<T extends ReadonlyArray<infer U> ? U : T>\n      : DT\n    : ReadonlyArray<T extends ReadonlyArray<infer U> ? U : T>\n  : never\n\n/** Override the property types of `A` with `B` and merge any new properties */\nexport type Merge<A, B> = Remap<\n  { [P in keyof A]: P extends keyof B ? B[P] : A[P] } & Omit<B, keyof A>\n>\n\n/** Return the keys of `T` with values that are assignable to `U` */\nexport type AssignableKeys<T, U> = T extends object\n  ? U extends object\n    ? {\n        [P in Extract<keyof T, keyof U>]: T[P] extends U[P] ? P : never\n      }[Extract<keyof T, keyof U>]\n    : never\n  : never\n\n/** Better type errors for overloads with generic types */\nexport type Constrain<T, U> = [T] extends [Any] ? U : [T] extends [U] ? T : U\n"},"lineCount":null}},"error":null,"hash":"e5a001ff41027ce5c8cea43fb839a7a0","cacheData":{"env":{}}}